% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/consent_exclusion.R
\name{apply.consent.exclusion}
\alias{apply.consent.exclusion}
\title{Apply consent exclusion to data}
\usage{
apply.consent.exclusion(phenotype.data, variable.summary)
}
\arguments{
\item{phenotype.data}{Data frame, containing input phenotype information
with a subject ID column.}

\item{variable.summary}{List of dataset configuration information
with a variable tagged with \code{subject_id = TRUE} to link subject
data to the consent list.}
}
\value{
List, with first entry \code{phenotype.data} a modified version of the input
phenotype data with any excluded subjects removed, and second
entry \code{variable.summary} a modified version of input config data with summary
information included about consent status for report.
}
\description{
Load subject list(s) specifying inclusion and exclusion of
subjects based on consent status. Depending on the presence
or absence of subjects and input lists, report summary
information about how many people have definitive information.
}
\details{
The concept of applying consent data is integrated directly
into the process.phenotypes logic chain. If either inclusion
or exclusion file (but not both) is provided, the relevant
process will still be conducted. However, if both are specified,
an additional set of subjects with uncertain consent status
will be computed, excluded from output, and reported in the
cleaning report.

Consent lists can be NULL in the input configuration (e.g.
\verb{consent_inclusion_file: ~} in yaml). This is perfectly
appropriate in contexts where consent is not applicable
(e.g. model organism data, anonymized collection, or just
random files unrelated to human subjects). We nevertheless
recommend its use in all applicable situations.

If a subject is specified in both the inclusion and exclusion
file, exclusion takes priority. If this behavior is not desired,
preprocess the input files such that the subject is only
present in the inclusion set.
}
\examples{
input.consent.inc.file <- tempfile("ace_example_inc")
input.consent.exc.file <- tempfile("ace_example_exc")
consent.inclusion <- c("A", "B")
consent.exclusion <- c("C", "D")
write.table(cbind(consent.inclusion), input.consent.inc.file,
  row.names = FALSE, col.names = FALSE, quote = FALSE
)
write.table(cbind(consent.exclusion), input.consent.exc.file,
  row.names = FALSE, col.names = FALSE, quote = FALSE
)
pheno.data <- data.frame(
  HW00001 = c("A", "B", "C", "D", "E"),
  HW00002 = 1:5
)
## note that by this stage of the process.phenotypes logic
## chain, the user-specified configuration entries from the
## input yaml have been sequestered in a block `params`
## for each variable.
var.sum <- list(
  globals = list(
    consent.inclusion.file = input.consent.inc.file,
    consent.exclusion.file = input.consent.exc.file
  ),
  variables = list(
    HW00001 = list(
      params = list(
        name = "subjid",
        type = "string",
        subject_id = TRUE
      )
    ),
    HW00002 = list(
      params = list(
        name = "measure",
        type = "numeric"
      )
    )
  )
)
res <- process.phenotypes:::apply.consent.exclusion(pheno.data, var.sum)
}

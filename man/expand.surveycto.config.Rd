% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_surveycto.R
\name{expand.surveycto.config}
\alias{expand.surveycto.config}
\title{Utility function to update an existing configuration
file from parse.surveycto, given new SurveyCTO export data}
\usage{
expand.surveycto.config(
  existing.yaml.filename,
  new.yaml.filename,
  new.cto.export.filename,
  form.definition.filename,
  new.processed.export.filename = new.cto.export.filename,
  intermediate.dataset.yaml = tempfile("expand.surveycto.dataset"),
  intermediate.shared.models = tempfile("expand.surveycto.shared_models"),
  quote = "\\"",
  sep = "\\t"
)
}
\arguments{
\item{existing.yaml.filename}{Character vector of name of
dataset yaml (potentially with custom configuration data)
from a run of parse.surveycto.}

\item{new.yaml.filename}{Character vector of name of output
dataset yaml.}

\item{new.cto.export.filename}{Character vector of name of
most recent wide-format csv output from SurveyCTO. This
iput has been tested with API output, though it should
work with web-based export as well.}

\item{form.definition.filename}{Character vector of name of
SurveyCTO form xlsx file that governs the format of the
current csv export.}

\item{new.processed.export.filename}{Character vector of
name of csv output from SurveyCTO with any postprocessed
modifications (see Details).}

\item{intermediate.dataset.yaml}{Character vector of name
of dataset yaml the function generates from parse.surveycto
for comparison purposes; if not specified, a generic tempfile.}

\item{intermediate.shared.models}{Character vector of name of
shared models yaml the file generates from parse.surveycto for
comparison purposes; if not specified, a generic tempfile.}

\item{quote}{Character vector used to quote string tokens in expanded SurveyCTO export
and passed to read.table. Defaults to NULL. This parameter is exposed for
greater compability with unpredictable input formats.}

\item{sep}{Character vector used to delimit input fields in expanded SurveyCTO export
and passed to read.table. Defaults to tab (\\t). This parameter is exposed for
greater compatibility with unpredictable input formats.}
}
\description{
Certain types of output columns in exported SurveyCTO
datasets are unpredictable, in the sense that, with a constant
form definition, the columns may or may not be present, and can
only be predicted with access to the export itself. This creates
challenges when trying to generate a variable specification for
this package from which one can predictably use variable
references, for example with the creation of derived variables,
or in order to generate consensus variables between datasets.
}
\details{
This function is designed to attempt to address the most
straightforward and yet fiddly versions of these kinds of
unpredictable variables. Repeat variables in SurveyCTO
form definitions expand based on the maximum number of repeat
responses observed in a dataset. Thus, in particular when
a data collection is very small, the set of output variables
can change drastically between data exports. Repeat variables
are not even guaranteed to be reported in the output at all
at first, until at least one respondent fills out at least
a single repeat response.

Repeat blocks are padded out based on the number of repeat
observations in the current data export. The existing yaml's
repeat content is expanded with consistent naming: if the
repeat block variable prefix is "HW00001_", and repeats
"HW00001_1" and "HW00001_2" were already present, configuration
blocks are injected starting with "HW00001_3".

In the case that the repeat block was not present \emph{at all}
in the original configuration, the repeat block is configured
with an auxiliary call to parse.surveycto, and the resulting
blocks are relabled and injected into the existing dataset
yaml. Due to the naming conventions in these configuration files,
the block is assigned new base numbers based on the maximum
variable number detected in the existing config's 'variables'
block. This breaks the standard convention of the variable
base numbers being strictly ascending through the file.
However, due to the possibly complex downstream uses of the
variable names, this is the most reliable manner of extending
the configuration file. If other behavior is desired, this
function is probably not suitable for your needs. Note again
that this particular issue only applies when a repeat block
was entirely absent from the original configuration file;
as long as one repeat was originally present, the number ordering
is preserved.

The raw wide csv output from SurveyCTO should be provided as
'new.cto.export.filename'. In certain applications, the actual
file used with the existing configuration file may not be
the raw SurveyCTO export; if, for example, other columns
are appended externally before processing, that resulting
csv or tsv should be provided as 'new.processed.export.filename'.
If this application does not apply or makes no sense to you,
that parameter can be excluded and the raw SurveyCTO export
will correctly be used in its place.

The parameters 'intermediate.dataset.yaml' and
'intermediate.shared.models' specify where the intermediate
output of parse.surveycto should be emitted. These default
to tempfiles; however, in some instances, these intermediates
might be useful to keep around for some time; and this function
is specifically imagined to be inserted into a pipeline, which
will feature file tracking. If desired, the filenames for
these intermediates can be specified here, and their ultimate
fate can be controlled by e.g. Snakemake or some other controller.

It is important to emphasize that this function is specifically
designed to handle repeat variables. It will not handle non-repeat
variables that were not present in the original configuration
but that have magically appeared in the new SurveyCTO export.
If such a variable is encountered, the function will error
with informative complaint, and the configuration will have
to be updated manually. Once the configuration is adjusted to
include these non-repeat variables, however, this function might
be called again to handle the repeat variables exclusively.
}
\examples{
existing.form <- system.file("examples", "parse_surveycto_example.xlsx",
  package = "process.phenotypes"
)
existing.csv <- system.file("examples", "parse_surveycto_example.csv",
  package = "process.phenotypes"
)
## first, use parse.surveycto to emit a configuration file set for the initial csv export
initial.dataset.yaml <- tempfile("esc_dataset", fileext = ".yaml")
initial.shared.models <- tempfile("esc_shared_models", fileext = ".yaml")
parse.surveycto(existing.form, existing.csv,
  "HW",
  initial.dataset.yaml, initial.shared.models,
  subject.id.name = "subjectid_1",
  age.name = "subjectage",
)

## after some time, you end up with a csv with a new repeat entry
expanded.csv <- tempfile("esc_expanded_csv", fileext = ".csv")
data <- read.table(existing.csv,
  header = TRUE, sep = ",",
  quote = "\"", comment.char = "", stringsAsFactors = FALSE
)
data <- cbind(
  data[, 1:11],
  sample(letters, nrow(data), replace = TRUE),
  data[, seq(12, ncol(data))]
)
colnames(data)[12] <- "subjectid_2"
write.table(data, expanded.csv,
  row.names = FALSE,
  col.names = TRUE, quote = TRUE, sep = ","
)

## expand the dataset configuration file to handle this new repeat entry
expanded.yaml <- tempfile("esc_expanded_yaml", fileext = ".yaml")
expand.surveycto.config(
  initial.dataset.yaml,
  expanded.yaml,
  expanded.csv,
  existing.form,
  quote = "\"",
  sep = ","
)
}
